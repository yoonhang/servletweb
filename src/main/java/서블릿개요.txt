실행방법에 따라 자바 클래스를 구분
 - Application : main메소드를 만들어서 실행
   java 클래스명
        ------
           |___ java인터프리터가 public static void main(String[] args)스펙이 메소드를 찾아서 실행
           
 - Applet : html태그에 삽입(지금은 안쓴다. 무겁다.)
 - Servlet
 
 
 <<서블릿>>
 - 클라이언트의 요청을 처리하기 위한 자바 기술
 - 서버에서 클라이언트의 요청을 처리하고 응답할 수 있도록 만들어진 객체
 - 클라이언트가 요청하면 서버에서 실행되면서 DB에 대한 처리, 서버의 리소를 이용해서 만들어진 결과를 클라이언트에 응답
 - 클라이언트가 요청하면 서버가 알아서 요청한 서블릿을 찾아서 실행하므로 서버가 찾을 수 있는 위치에 있어야 한다.
                                                  --------------------
                                                     서블릿디렉토리(classes폴더)
                                                     표준화된 폴더 구조의 classes폴더
                                                     => 서버가 서블릿을 찾는 위치
 - 서버 내부에서  우리가 만들어 놓은 서블릿 클래스가 실행되도록 하려면 서버가 서블릿이라고 인지할 수 있어야 한다.   
   -------------------
      서버가 서블릿 찾아서 자동으로 실행되도록 하려면
      서버의 많은 기능들이 서블릿에서 자동실행될 수 있도록 하려면
 
 - html문서내에서 실행된다.html문서는 자바코드를 작성할 수 없다.
 - 따라서 서버와 약속된 특정 방법을 적용해서 서블릿이 실행되도록 해야 한다.
    -------------------------------------------
         서블릿을 만드는 방법도 정해져 있고 서블릿을 실행하는 방법도 정해져 있다.
         서버가 서블릿을 생성하고 서블릿의 메소드를 호출한다.
         
         
         
1. 서블릿작성규칙
   - 서버가 찾아서 실행할 수 있도록 규칙에 맞게 서블릿을 작성해야 한다.
   1) 표준화된 폴더 구조 안에 서블릿클래스가 위치해야 한다.
      C:\backend23\work\webwork\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps
      [표준화된 폴더 구조]
      context
         |
         | ---- jsp,html,css,js,image(폴더가 있어도 좋음)
         |
         |__ WEB-INF
                |
                |-- web.xml : 설정정보를 정의하는 설정파일(context내부의 설정정보)
                |-- lib(폴더) : 필요한 자바라이브러리 파일(ojdbc6.jar, jsoup.jar...)
                |__ classes(폴더) : 서블릿, dao,dto,vo,jdbc,service.......
                    --------
                      서블릿디렉토리
                
   2) 서버가 호출할 것이므로 무조건 public클래스로 작성해야 한다.
   3) 서버가 서블릿클래스로 인식하고 실행해야 하므로 무조건 상속해야 하는 클래스가 존재한다.
      => 서블릿클래스가 되기 위해서 무조건 서블릿클래스를 상속해야 한다.
      Servlet        인터페이스
        ^
        |
   GenericServlet   추상클래스(서블릿의 일반적인 내용이 정의된 서블릿클래스)
        ^
        |
    HttpServlet     http(https)프로토콜에 특징적인 내용이 정의된 서블릿클래스
        ^                      --------------------
        |                         쿠키,세션....
     MyServlet      사용자가 만든 서블릿


  4) 서버가 호출할 메소드를 오버라이딩
     - 사용자가 임의로 메소드를 만들면 서버가 알 수 없다.
     - 서버가 자동으로 찾아서 호출하기 위해서 상속받은 클래스가 갖고 있는 메소드를 오버라이딩해서 내가 실행하고 싶은 명령문을 구현한다.
     - 서버가 적절한 시점에 호출하는 메소드를 callback메소드라한다.
     - 클라이언트가 요청하면 서버가 요청을 분석을 해서 서블릿디렉토리에 위치한 서블릿을 찾아 적절한 시점에 오버라이딩된 메소드를
       찾아서 자동으로 호출한다.
       따라서 상황에 맞게 실행하고 싶은 메소드를 오버라이딩해서 내용을 정의한다.
      
      [오버라이딩해야 하는 메소드]
      - init : 서블릿객체가 초기화될 때 호출
      - service : 클라이언트가 요청할 때 호출(get,post모든 방식으로 요청해도 실행되는 메소드)
                   => 클라이언트의 요청을 처리하는 메소드로 요청을 받고 처리할 내용을 구현
                   ex) 로그인, 로그아웃, 회원가입, 게시판목록보기, 장바구니,예약하기......
     
      - doGet : 클라이언트가 get방식으로 요청할때 호출되는 메소드
      - doPost : 클라이언트가 post방식으로 요청할떄 호출되는 메소드
      - destroy : 서블릿객체가 소멸될 때 호출
      
   5) 서블릿등록
      - 서버가 서블릿을 찾을 수 있도록 정확한 경로를 등록
      - 서버가 요청정보를 분석해서 서블릿디렉토리에서 서블릿을 찾아서 실행할 수 있도록 등록
      - 어떤 요청에 대해서 어떤 서블릿이 실행될지를 명확하게 등록
      - 설정파일에 등록(web.xml)
      - 실제 작업은 annotation을 이용해서 설정
      - web.xml파일은 xml형식의 파일이므로 사용할 엘리먼트가 이미 정의가 되어 있고 작성 규칙이 정해져 있으므로 맞게 작업해야한다.
                                                              --------
                                                               dtd - xml안에서 정의하고 사용할 엘리먼트
                                                                     의 명세
                                                                     (엘리먼트 순서, 타입, 값
                                                                      하위엘리먼트...)
      
      ① 서블릿을 등록
        - 실제 어떤 패키지의 어떤 클래스를 실행할 것인지 등록:무엇을
        <servlet>
  			<servlet-name>서블릿명(alias)</servlet-name>
  			<servlet-class>서블릿의 실제 클래스명과 위치(패키지명)</servlet-class>
  		</servlet>
      
        ex)basic패키지의 FirstServlet을 first이름으로 등록
        <servlet>
  			<servlet-name>first</servlet-name>
  			<servlet-class>basic.FirstServlet</servlet-class>
  		</servlet>
      
      ② 서블릿 매핑
        - 등록된 서블릿을 어떻게 요청했을때 실행할 것인지를 등록(어떤 url로 요청할 것인지)
        - 반드시 <servlet>엘리먼트 다음에 정의해야 한다.
        - <servlet>엘리먼트와 한 쌍으로 정의해야 한다.
        - 먼저 등록한 서블릿을 어떻게 요청해서 실행할 것인지를 등록
        <servlet-mapping>
  			<servlet-name>위에서 정의한 서블릿 이름</servlet-name>
  			<url-pattern>요청할 서블릿의 path</url-pattern>
  			             -----------------
  		</servlet-mapping>     ^
                               |____경로이므로 반드시 /로 시작하거나 .으로 시작
       
        
        ex) first라는 이름으로 등록된 서블릿을 /first.multi로 요청하면 실행되도록 등록
        <servlet-mapping>
  			<servlet-name>first</servlet-name>
  			<url-pattern>/first.multi</url-pattern>
  		</servlet-mapping>
     
2. 서블릿요청하는 방법
   - 서블릿을 어떻게 실행해야 하는 지 알 수 있어야 한다.
   - html형식의 문서내에서 서블릿을 요청하므로 규칙이 있다.
     http://서버ip:port/context명/서블릿매핑명
                                --------
                                  |__web.xml에 <url-pattern>에 등록하거나
                                       annotation에 설정한 경로
                                       
     http://192.168.45.73:8088/serverweb/first.multi
    -----  -------------- ---- --------- -----------
    프로토콜    ip           port  context명  매핑명
   
   - 어떤 방법(rest api에서의 요청은 제외)으로 요청하냐에 따라 get방식과 post방식으로 요청할 수 있다.
   
   1) get방식으로 요청
      => 클라이언트가 입력한 내용이 요청헤더에 저장되어 서버로 전송되는 방식
         주로 서버에 저장된 데이터를 가져오는 경우 사용
      ① 주소표시줄에 직접 입력해서 요청하는 방식
        => 테스트용으로 사용되거나 첫 번째 페이지에서 요청하는 경우
          http://192.168.45.73:8088/serverweb/gugu.html
        
      ② 하이퍼링크로 요청  
        =>텍스트나 이미지를 클릭해서 서블릿을 요청하는 경우
        <a href="/serverweb/life.do"></a>
        
      ③ <form>태그의 method속성에 get을 정의하고 submit버튼을 눌러 요청하는 경우
        => <form>태그의 submit버튼을 누르면 action에 정의한 application이 요청되어 실행되며
           양식태그를 통해서 클라이언트가 입력한 혹은 선택한 모든 name과 value가 전송된다.
           ----------------------------
              <form></form>사이의 모든 양식태그를 통한 작업
             
           이떄 method속성에 정의한 요청방식으로 요청된다.
      
      
   2) post방식으로 요청
      => form태그의 method에 post를 정의하고 submit버튼을 눌러 요쳥하는 경우
   3) 자바스크립트로 get/post로 요청하기
   
3. 서블릿에서 요청 정보 추출
   http://localhost:8088/serverweb/life.do?id=bts1&pass=1234
   서블릿객체가 생성되고 쓰레드로 service(doGet,doPost)가 실행될때 서버가 
   클라이언트의 요청정보를 HttpServletRequest객체로 만들어서 매개변수에 호출할때 전달한다.
   
   request객체가 갖고 있는 많은 메소드를 이용해서 요청정보를 추출할 수 있다.
   
   http://192.168.45.73:8088/serverweb/basicview/login.html
   
4. 서블릿의 lifecycle
5. 서블릿과 DB연동
6. 요청재지정(화면이동)
   - 클라이언트가 최초 요청한 서블릿이 응답하지 않고(혹은 응답하더라도)
     다른 web application(html,jsp,서블릿)이 응답되도록 
     서블릿 내부에서 재요청하는 것을 의미
   - 서블릿에서 뷰를 분리하기 위해서 반드시 알아야 하는 개념
   - MVC패턴을 적용하기 위해서 반드시 알아야 하는 개념
   1) 요청재지정방법
      - response객체의 sendRedirect를 이용하는 방법
      - RequestDispatcher가 제공하는 forward : 서블릿에서 주로 사용
      - RequestDispatcher가 제공하는 include : jsp에서 주로 사용

   2) 데이터공유
      - 데이터를 서블릿에서 공유하고 분리된 뷰(응답화면)에서 꺼내서 써야하는데 html파일은 자바코드를 사용할 수 없다.
      - 자바코드도 쓰고 html태그도 쓸 수 있는 jsp를 이용
      - 데이터의 공유는 어디에 공유할 수 있는지 scope가 있다.(page, request,session,application이 있다.)
      - 각각의 scope에 해당하는 객체가 존재하며 이 객체 내부에는 데이터를 공유할 수 있도록 공유메소드를 갖고 있다.
      - request scope객체(ServletRequest)
      - session scope객체(HttpSession)
      ① 데이터공유하기
        scope객체.setAttribute("공유할 객체의 이름",공유할 객체)
                             -------------- ---------
                               공유명          자바에서 사용되는 모든 객체를 공유할 수 있다.
                                             개발자마다 다른 객체를 공유할 수 있으므로 Object(다형성)
         
      ② 공유된 객체 꺼내기
        => 공유된 객체 타입이 Object이므로 실제 공유된 객체의 타입으로 casting해야 한다.   
         공유한객체의타입  변수 = (공유객체타입)scope객체.getAttribute("공유한 객체의 이름")
                           ---------
                             공유될때 타입이 java.lang.Object이므로 꺼낼때 캐스팅해주어야 한다.
         
         
7. sendRedirect
   [문법]
   HttpServletResponse의 sendRedirect를 이용
   response.sendRedirect("요청재지정될 web application path")
                          ------------------------------
                              context부터 정의해야 한다.

    - 최초 요청됐던 서블릿이 response하고 다시 재요청해서 실행하는 방법이므로 데이터를 공유할 수 없다.
    - 로그인 아이디나 패스워드를 잘못입력한 경우 로그인 페이지를 다시 보여주기 위한 방법
    - 스프링MVC는 기본이 forward
    - 두 번의 요청이 처리되므로 요청재지정한 application의 path로 주소표시줄이 바뀐다.
                        ---------------------
                            두 번째 요청된 application


8. forward
   [문법]
   RequestDispatcher rd = request.getRequestDispatcher("요청재지정할 web application path")
   rd.forward(request객체,response객체)                  --------------------------------------
                                                        response하지 않고 한 번의 요청으로 서블릿과 jsp가 실행되므로
                                                         path는 context명은 뺴고 정의하기

   - 가장 일반적으로 사용되는 방법
   - 최초 요청으로 서블릿,jsp가 실행되므로 데이터 공유가 가능
   - 한 번의 요청으로 모든 application이 실행되므로 주소표시줄이 첫 번째 요청된 path로 남아있다.














 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
         
         
                                           